package com.allen.web.controller.schedule;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.apache.commons.lang3.StringUtils;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.allen.core.common.Const;
import com.allen.core.entity.JSONResult;
import com.allen.core.feature.orm.mybatis.Page;
import com.allen.core.generic.GenericController;
import com.allen.web.enums.EnumAuditCategory;
import com.allen.web.model.AuditNode;
import com.allen.web.model.AuditTask;
import com.allen.web.model.CardInfo;
import com.allen.web.model.ConsumptionVo;
import com.allen.web.security.PermissionSign;
import com.allen.web.service.audit.AuditNodeService;
import com.allen.web.service.audit.AuditTaskService;
import com.allen.web.service.card.CardInfoService;

/**
 * 
* @ClassName: ScheduleController 
* @Description: 待办事项 controller (目前只有审批卡信息) 
* @author wenquan
* @date 2016年8月11日 上午11:08:42 
*
 */
@RequestMapping("/schedule")
@Controller
public class ScheduleController extends GenericController{

	@Resource
	AuditTaskService auditTaskService;
	@Resource
	AuditNodeService auditNodeService;
	@Resource
	CardInfoService cardInfoService;
	/**
	 * 
	* @Title: toDoList 
	* @Description: 待办事项
	* @param @param map
	* @param @param pageNo
	* @param @return    设定文件 
	* @return String    返回类型 
	* @throws
	 */
	@RequestMapping("/toDoList")
	@RequiresPermissions(value=PermissionSign.AUDIT)
	public String toDoList(
			@RequestParam(value = "pageNo", required = false) String pageNo,
			ModelMap map){
		String defaultPageNo = pageNo;
		if (StringUtils.isBlank(defaultPageNo)) {
			defaultPageNo="1";
		}
		Page<AuditTask> page = new Page<>(Integer.parseInt(defaultPageNo), Const.PAGE_SIZE);
		List<AuditNode> nodeList = this.auditNodeService.selectPendent(this.getLoginUser().getUserId());
		List<AuditTask> taskList = this.auditTaskService.selectToDoList(this.getLoginUser().getUserId(), EnumAuditCategory.CARD.getCode(), page);
		Map<String, List<Object>> dataMap = new HashMap<>();
		for (AuditTask auditTask : taskList) {
			List<Object> list = new ArrayList<>();
			list.add(auditTask);
			CardInfo cardInfo = this.cardInfoService.selectById(auditTask.getRootId());
			list.add(cardInfo);
			for (AuditNode auditNode : nodeList) {
				if (auditNode.getTaskId().equals(auditTask.getTaskId())) {
					dataMap.put(auditNode.getNodeId(), list);
					break;
				}
			}
		}
		map.put("dataMap", dataMap);
		map.put("page", page);
		return "/schedule/toDoList";
	}
	
	/**
	 * 
	* @Title: committedList 
	* @Description: 查询已提交流程 
	* @param @param pageNo
	* @param @param map
	* @param @return    设定文件 
	* @return String    返回类型 
	* @throws
	 */
	@RequestMapping("/committedList")
	@RequiresPermissions(value=PermissionSign.AUDIT)
	public String committedList(
			@RequestParam(value = "pageNo", required = false) String pageNo,
			ModelMap map){
		String defaultPageNo = pageNo;
		if (StringUtils.isBlank(defaultPageNo)) {
			defaultPageNo="1";
		}
		Page<AuditTask> page = new Page<>(Integer.parseInt(defaultPageNo), Const.PAGE_SIZE);
		List<AuditTask> taskList = this.auditTaskService.selectCommittedList(this.getLoginUser().getUserId(), EnumAuditCategory.CARD.getCode(), page);
		LinkedHashMap<AuditTask, CardInfo> dataMap = new LinkedHashMap<>();
		for (AuditTask auditTask : taskList) {
			CardInfo cardInfo = this.cardInfoService.selectById(auditTask.getRootId());
			dataMap.put(auditTask, cardInfo);
		}
		map.put("dataMap", dataMap);
		map.put("page", page);
		return "/schedule/committedList";
	}
	
	/**
	 * 
	* @Title: auditPass 
	* @Description: 异步批量审核通过 
	* @param @param nodeIdList
	* @param @param map
	* @param @return    设定文件 
	* @return JSONResult<Object>    返回类型 
	* @throws
	 */
	@ResponseBody
	@RequestMapping("/ajax/auditPass")
	@RequiresPermissions(value=PermissionSign.AUDIT)
	public JSONResult<Object> auditPass(@RequestParam(value = "nodeIdList[]", required = false)  List<String> nodeIdList,
			ModelMap map){
		int i = this.auditNodeService.auditPass(nodeIdList);
		
		JSONResult<Object> jsonResult = new JSONResult<>();
		if(i>0){
			jsonResult.setSuccess(true);
		}else {
			jsonResult.setSuccess(false);
		}
		return jsonResult;
	}

	/**
	 * 
	* @Title: auditRefused 
	* @Description: 异步批量审核不通过 
	* @param @param nodeIdList
	* @param @param remark
	* @param @param map
	* @param @return    设定文件 
	* @return JSONResult<Object>    返回类型 
	* @throws
	 */
	@ResponseBody
	@RequestMapping("/ajax/auditRefused")
	@RequiresPermissions(value=PermissionSign.AUDIT)
	public JSONResult<Object> auditRefused(
			@RequestParam(value = "nodeIdList[]", required = false)  List<String> nodeIdList,
			@RequestParam(value = "remark", required = false)  String remark,
			ModelMap map){
		int i = this.auditNodeService.auditRefused(nodeIdList, remark);
		JSONResult<Object> jsonResult = new JSONResult<>();
		if(i>0){
			jsonResult.setSuccess(true);
		}else {
			jsonResult.setSuccess(false);
		}
		return jsonResult;
	}

	/**
	 * 
	* @Title: queryAuditProcess 
	* @Description: 异步查询审核进度 
	* @param @param taskId
	* @param @param map
	* @param @return    设定文件 
	* @return JSONResult<Object>    返回类型 
	* @throws
	 */
	@ResponseBody
	@RequestMapping("/ajax/queryAuditProcess")
	public JSONResult<Object> queryAuditProcess(
			@RequestParam(value = "taskId", required = false)  String  taskId,
			ModelMap map){
		List<AuditNode> nodeList = this.auditNodeService.selectNodeByTask(taskId);
		JSONResult<Object> jsonResult = new JSONResult<>();
		jsonResult.setData(nodeList);
		jsonResult.setSuccess(true);
		return jsonResult;
	}
}
