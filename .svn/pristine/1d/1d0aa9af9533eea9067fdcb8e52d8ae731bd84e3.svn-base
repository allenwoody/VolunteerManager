package com.allen.web.controller.organization;

import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.validation.Valid;

import org.apache.commons.lang3.StringUtils;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.allen.core.common.Const;
import com.allen.core.entity.JsonTreeNode;
import com.allen.core.generic.GenericController;
import com.allen.core.util.ApplicationUtils;
import com.allen.web.enums.EnumBool;
import com.allen.web.enums.EnumOrgType;
import com.allen.web.enums.EnumValidateErroMessage;
import com.allen.web.model.Organization;
import com.allen.web.security.PermissionSign;
import com.allen.web.service.organization.OrganizationService;
import com.allen.web.service.region.CityService;
import com.allen.web.service.region.ProvinceService;
import com.allen.web.service.user.UserService;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;

/**
 * 
* @ClassName: OrganizationController 
* @Description: 机构维护Controller 
* @author wenquan
* @date 2016年8月2日 下午2:06:34 
*
 */
@RequestMapping("/organization")
@Controller
public class OrganizationController extends GenericController {
	
	
	
	@Resource
	OrganizationService organizationService;
	@Resource
	UserService userService;
	@Resource
	ProvinceService provinceService;
	@Resource
	CityService cityService;
	/**
	 * 机构查询页
	 * @param oprationCode
	 * @param map
	 * @return
	 */
	@RequestMapping("/listOrganization")
	@RequiresPermissions(value = PermissionSign.ORG_QUERY)
	public String listOrganization(
			ModelMap map){
		Map<String, String> orgtypeMap = EnumOrgType.toMixMap();
		map.put("orgtypeMap", orgtypeMap);
		return "/organization/listOrganization";
	}
	
	/**
	 * 
	* @Title: addOrgPage 
	* @Description: 机构新增 
	* @param @param orgId
	* @param @param map
	* @param @return    设定文件 
	* @return String    返回类型 
	* @throws
	 */
	@RequestMapping("/addOrganization")
	@RequiresPermissions(value = PermissionSign.ORG_CREATE)
	public String addOrgPage(
			@RequestParam(value = "orgId", required = false) String orgId,
			ModelMap map) {
		Organization parentOrg = this.organizationService.selectById(orgId);
		Map<String, String> orgTypeMap = EnumOrgType.toMixMap();
		orgTypeMap.remove(EnumOrgType.GROUP.getCode());
		map.put("orgTypeMap", orgTypeMap);
		map.put("parentOrg", parentOrg);
		return "/organization/addOrganization";
	}
	
	/**
	 * 
	* @Title: editOrg 
	* @Description: 机构修改页面 
	* @param @param orgId
	* @param @param map
	* @param @return    设定文件 
	* @return String    返回类型 
	* @throws
	 */
	@RequestMapping("/editOrganization")
	@RequiresPermissions(value = PermissionSign.ORG_UPDATE)
	public String editOrg(
			@RequestParam(value = "orgId", required = false) String orgId,
			ModelMap map){
		Organization organization = this.organizationService.selectById(orgId);
		Organization parentOrganization = this.organizationService.selectById(organization.getParentId());
		map.put("organization", organization);
		map.put("parentOrganization", parentOrganization);
		map.put("orgTypeMap", EnumOrgType.toMap());
		return "/organization/editOrganization";
	}
	
	/**
	 * 提交新增机构
	 * @param model
	 * @param map
	 * @return
	 * @throws UnsupportedEncodingException 
	 */
	@RequestMapping("/insertOrganization")
	@RequiresPermissions(value = PermissionSign.ORG_CREATE)
	public String insertOrg(
			@Valid Organization model,
			ModelMap map) throws UnsupportedEncodingException {
		model.setOrgId(ApplicationUtils.randomUUID());
		model.setCreateTime(new Date());
		model.setIsValid(EnumBool.YES.getCode());
		Organization parentOrg = this.organizationService.selectById(model.getParentId());
		model.setLevel(parentOrg.getLevel()+1);
		//校验
		List<String> validateMsgs = validateModel(model);
		if (!validateMsgs.isEmpty()) {
			//校验出错
			map.put("validateMsg", validateMsgs.get(0));
			map.put("model", model);
			Map<String, String> orgtypeMap = EnumOrgType.toMixMap();
			map.put("orgtypeMap", orgtypeMap);
			return "/organization/addOrganization";
		}
		this.organizationService.insert(model);
		return "redirect:/organization/listOrganization.html";
	}
	
	private List<String> validateModel(Organization model){
		List<String> list = new ArrayList<>();
		
		List<Organization> orgList = this.organizationService.selectbyParentIdAndOrgName(model.getParentId(), model.getOrgName());
		List<Organization> orgList2 = this.organizationService.selectbyParentIdAndOrgCode(model.getParentId(), model.getOrgCode());
		
		
		if ((orgList!=null)&&(!orgList.isEmpty())) {
			list.add(EnumValidateErroMessage.UNIQUE_ORGNAME.getMsg());
		}
		if ((orgList2!=null)&&(!orgList2.isEmpty())) {
			list.add(EnumValidateErroMessage.UNIQUE_ORGCODE.getMsg());
		}
		return list;
	}
	/**
	 * 更新机构
	 * @param model
	 * @param city
	 * @return
	 */
	@RequestMapping("/updateOrganization")
	@RequiresPermissions(value = PermissionSign.ORG_UPDATE)
	public String updateOrganization(@Valid Organization model){
		this.organizationService.update(model);
		return "redirect:/organization/listOrganization.html";
	}
	
	/**
	 * 删除机构
	 * @param orgId
	 * @return
	 */
	@RequestMapping("/deleteOrganization")
	@RequiresPermissions(value = PermissionSign.ORG_DELETE)
	public String deleteOrganization(
			@RequestParam(value = "orgId", required = false) String orgId){
		this.organizationService.delete(orgId);
		return "redirect:/organization/listOrganization.html";
	}
	
	/**
	 * 获取机构（Datagrid）
	 * @return
	 */
	@RequestMapping("/getOrganizations")
	@ResponseBody
	public String getOrganizations(
			@RequestParam(value = "orgName", required = false) String orgName,
			@RequestParam(value = "orgtype", required = false) String orgtype,
//			@RequestParam(value = "pageNo", required = false) String pageNo,
			ModelMap map){
		Organization model = new Organization();
		model.setOrgName(orgName);
		model.setOrgType(orgtype);
//		List<Organization> list = this.organizationService.selectByExample(page, model);
		List<Organization> list = this.organizationService.selectByExample(model);
		ObjectMapper objectMapper = new ObjectMapper();  
		String result="";
		try {
//			result = "{\"total\" : " + page.getTotalCount() + ",\"rows\":" + objectMapper.writeValueAsString(list) + "}";
			result = objectMapper.writeValueAsString(list);
		} catch (JsonProcessingException e) {
			e.printStackTrace();
		}
		return result;
	}
	
	/**
	 * 获取机构VO
	 * @param orgId
	 * @return
	 * @throws JsonProcessingException
	 */
	@ResponseBody
	@RequestMapping("/getOrgById")
	public String getOrgById(@RequestParam(value = "orgId", required = false) String orgId) throws JsonProcessingException{
		ObjectMapper objectMapper = new ObjectMapper();  
		Organization vo = this.organizationService.selectById(orgId);
		return objectMapper.writeValueAsString(vo);
	}
	
	/**
	 * 获取机构树（全部机构）
	 * @return
	 * @throws Exception
	 */
	@RequestMapping("/getOrgTree")
	@ResponseBody
	public String getOrgTree() throws Exception{
		JsonTreeNode root = organizationService.buildOrgTree();
		String result;
		ObjectMapper objectMapper = new ObjectMapper();
		result = "[" + objectMapper.writeValueAsString(root) + "]";
		return result ;
	}
	
	/**
	 * 获取机构树（集团和事业部）
	 * @return
	 * @throws Exception 
	 */
	@RequestMapping("/getBusinessUnitTree")
	@ResponseBody
	public String getOrgTreeScope4GroupAndBusinessUnit() throws Exception{
		JsonTreeNode root = organizationService.buildBusinessUnitTree();
		String result;
		ObjectMapper objectMapper = new ObjectMapper();
		result = "[" + objectMapper.writeValueAsString(root) + "]";
		return result ;
	}
	
	/**
	 * 同一机构下机构名称唯一性校验
	 * @param parentId
	 * @param orgName
	 * @return
	 */
	@ResponseBody
	@RequestMapping("/validateOrgName")
	public String validateOrgName(
			@RequestParam(value = "parentId", required = false) String parentId,
			@RequestParam(value = "orgName", required = false) String orgName){
		List<Organization> list = this.organizationService.selectbyParentIdAndOrgName(parentId, orgName);
		if (null==list||list.isEmpty()) {
			return "true";
		}
		return "false";
	}
	
	/**
	 * 同一机构下机构代码唯一性校验
	 * @param parentId
	 * @param orgCode
	 * @return
	 */
	@ResponseBody
	@RequestMapping("/validateOrgCode")
	public String validateOrgCode(
			@RequestParam(value = "parentId", required = false) String parentId,
			@RequestParam(value = "orgCode", required = false) String orgCode){
		List<Organization> list = this.organizationService.selectbyParentIdAndOrgCode(parentId, orgCode);
		if (null==list||list.isEmpty()) {
			return "true";
		}
		return "false";
	}
	
	/**
	 * 删除机构校验
	 * @param orgId
	 * @return
	 */
	@ResponseBody
	@RequestMapping("/validateDeleteOrg")
	public Map<String, String> validateDeleteOrg(
		@RequestParam(value = "orgId", required = false) String orgId) {
		Map<String, String> map = new HashMap<>();
		
		List<Organization> childList = organizationService.selectByParentId(orgId);
		
		if (!(childList==null||childList.isEmpty())) {
			//验证机构下是否有其他机构
			//存在子机构，不允许删除
			map.put("msg", EnumValidateErroMessage.EXIST_CHILD_ORG.getMsg());
		}else {
			map.put("msg", Const.SUCCESS);
		}
		return map;
	}
	
}
