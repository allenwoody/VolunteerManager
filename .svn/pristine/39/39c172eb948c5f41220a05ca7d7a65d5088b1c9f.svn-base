package com.allen.web.service.dbinfo;

import java.util.List;

import javax.annotation.Resource;

import org.springframework.stereotype.Service;

import com.allen.core.feature.orm.mybatis.Page;
import com.allen.core.generic.GenericDao;
import com.allen.core.generic.GenericServiceImpl;
import com.allen.core.util.ApplicationUtils;
import com.allen.web.dao.DbInfoMapper;
import com.allen.web.dao.DbOrganizationMapper;
import com.allen.web.enums.EnumBool;
import com.allen.web.model.DbInfo;
import com.allen.web.model.DbInfoExample;
import com.allen.web.model.DbOrganization;
import com.allen.web.model.DbOrganizationExample;

/**
 * 
 * @ClassName: DbInfoServiceImpl
 * @Description: DB信息维护服务实现类
 * @author wenquan
 * @date 2016年7月11日 上午9:25:44
 *
 */
@Service
public class DbInfoServiceImpl extends GenericServiceImpl<DbInfo, String>implements DbInfoService {

	@Resource
	DbInfoMapper dbInfoMapper;
	@Resource
	DbOrganizationMapper dbOrganizationMapper;

	@Override
	public List<DbInfo> selectList() {
		DbInfoExample example = new DbInfoExample();
		example.createCriteria().andIsValidEqualTo(EnumBool.YES.getCode());
		return this.dbInfoMapper.selectByExample(example);
	}

	@Override
	public List<DbInfo> selectList(Page<DbInfo> page) {
		DbInfoExample example = new DbInfoExample();
		example.createCriteria().andIsValidEqualTo(EnumBool.YES.getCode());
		return this.dbInfoMapper.selectByExample(example, page);
	}

	@Override
	public int delete(String id) {
		DbInfo record = new DbInfo();
		record.setDbId(id);
		record.setIsValid(EnumBool.NO.getCode());
		return this.dbInfoMapper.updateByPrimaryKeySelective(record);
	}

	@Override
	public GenericDao<DbInfo, String> getDao() {
		return this.dbInfoMapper;
	}

	@Override
	public int createDbInfo(DbInfo dbInfo, String[] orgIds) {
		int i = this.insert(dbInfo);
		String dbId = dbInfo.getDbId();
		DbOrganization record = new DbOrganization();
		record.setDbId(dbId);
		if (orgIds.length < 1) {
			return i;
		}
		for (String orgId : orgIds) {
			record.setDoId(ApplicationUtils.randomUUID());
			record.setOrgId(orgId);
			i = i + this.dbOrganizationMapper.insert(record);
		}
		return i;
	}

	@Override
	public int editDbInfo(DbInfo dbInfo, String[] orgIds) {
		int i = this.update(dbInfo);
		String dbId = dbInfo.getDbId();
		DbOrganization record = new DbOrganization();
		record.setDbId(dbId);
		if (orgIds.length < 1) {
			return i;
		}
		DbOrganizationExample example = new DbOrganizationExample();
		example.createCriteria().andDbIdEqualTo(dbId);
		i = this.dbOrganizationMapper.deleteByExample(example);
		for (String orgId : orgIds) {
			record.setDoId(ApplicationUtils.randomUUID());
			record.setOrgId(orgId);
			i = i + this.dbOrganizationMapper.insert(record);
		}
		return i;
	}

	@Override
	public String[] selectOrgByDbId(String dbId) {
		DbOrganizationExample example = new DbOrganizationExample();
		example.createCriteria().andDbIdEqualTo(dbId);
		List<DbOrganization> list = this.dbOrganizationMapper.selectByExample(example);
		int size = list.size();
		String[] orgIds = new String[size];
		for (int i = 0; i < size; i++) {
			orgIds[i] = list.get(i).getOrgId();
		}
		return orgIds;
	}
}
