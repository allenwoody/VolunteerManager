package com.allen.web.controller.dbinfo;

import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.validation.Valid;

import org.apache.commons.lang3.StringUtils;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.allen.core.common.Const;
import com.allen.core.feature.orm.mybatis.Page;
import com.allen.core.generic.GenericController;
import com.allen.core.util.ApplicationUtils;
import com.allen.web.enums.EnumBool;
import com.allen.web.model.Company;
import com.allen.web.model.DbInfo;
import com.allen.web.security.PermissionSign;
import com.allen.web.service.company.CompanyService;
import com.allen.web.service.dbinfo.DbInfoService;

/**
 * 
* @ClassName: DbInfoController 
* @Description: Db卡信息维护Controller 
* @author wenquan
* @date 2016年7月11日 上午10:05:22 
*
 */
@RequestMapping("/db")
@Controller
public class DbInfoController extends GenericController{
	
	@Resource
	DbInfoService dbInfoService;
	@Resource
	CompanyService companyService;
	
	/**
	 * 
	* @Title: listDbInfo 
	* @Description: db卡信息列表 
	* @param @param pageNo
	* @param @param map
	* @param @return    设定文件 
	* @return String    返回类型 
	* @throws
	 */
	@RequestMapping("/listDbInfo")
	@RequiresPermissions(value = PermissionSign.DB_QUERY)
	public String listDbInfo(
			@RequestParam(value = "pageNo", required = false) String pageNo,
			ModelMap map){
		String defaultPageNo = pageNo;
		if (StringUtils.isBlank(defaultPageNo)) {
			defaultPageNo="1";
		}
		DbInfo model = new DbInfo();
		Page<DbInfo> page = new Page<>(Integer.parseInt(defaultPageNo), Const.PAGE_SIZE);
		List<DbInfo> dbList = this.dbInfoService.selectList(page);
		List<Company> companyList = this.companyService.selectList();
		Map<DbInfo, String> dbInfoMap = new LinkedHashMap<>();
		for (DbInfo dbInfo : dbList) {
			Company company = this.companyService.selectById(dbInfo.getCompanyId());
			if(company!=null){
				dbInfoMap.put(dbInfo, company.getCompanyName());
			}
		}
		map.put("dbList", dbList);
		map.put("dbInfoMap", dbInfoMap);
		map.put("page", page);
		map.put("model", model);
		return "/db/listDbInfo";
	}
	
	/**
	 * 
	* @Title: addDbInfo 
	* @Description: 新增DB卡信息 
	* @param @param map
	* @param @return    设定文件 
	* @return String    返回类型 
	* @throws
	 */
	@RequestMapping("/addDbInfo")
	@RequiresPermissions(value = PermissionSign.DB_CREATE)
	public String addDbInfo(ModelMap map){
		List<Company> companyList = this.companyService.selectAllCompany();
		map.put("companyList", companyList);
		return "/db/addDbInfo";
	}
	
	/**
	 * 
	* @Title: inserDbInfo 
	* @Description: 插入DB卡信息 
	* @param @param model
	* @param @param map
	* @param @return    设定文件 
	* @return String    返回类型 
	* @throws
	 */
	@RequestMapping("/insertDbInfo")
	@RequiresPermissions(value = PermissionSign.DB_CREATE)
	public String inserDbInfo(@Valid DbInfo dbInfo, @RequestParam(value = "orgId", required = false) String[] orgIds){
		dbInfo.setDbId(ApplicationUtils.randomUUID());
		dbInfo.setIsValid(EnumBool.YES.getCode());
//		String[] orgIds = this.getRequest().getParameterValues("orgId");
		this.dbInfoService.createDbInfo(dbInfo, orgIds);
		return "redirect:/db/listDbInfo.html";
	}
	
	/**
	 * 
	* @Title: editDbInfo 
	* @Description: 编辑DB卡信息 
	* @param @param dbId
	* @param @param map
	* @param @return    设定文件 
	* @return String    返回类型 
	* @throws
	 */
	@RequestMapping("/editDbInfo")
	@RequiresPermissions(value = PermissionSign.DB_UPDATE)
	public String editDbInfo(
			@RequestParam(value = "dbId", required = false) String dbId,
			ModelMap map){
		List<Company> companyList = this.companyService.selectAllCompany();
		map.put("companyList", companyList);
		DbInfo dbInfo = this.dbInfoService.selectById(dbId);
		String[] orgIds = this.dbInfoService.selectOrgByDbId(dbId);
		map.put("dbInfo", dbInfo);
		map.put("orgIds", orgIds);
		return "/db/editDbInfo";
	}
	
	/**
	 * 
	* @Title: updateDbInfo 
	* @Description: 更新DB卡信息 
	* @param @param model
	* @param @return    设定文件 
	* @return String    返回类型 
	* @throws
	 */
	@RequestMapping("/updateDbInfo")
	@RequiresPermissions(value = PermissionSign.DB_UPDATE)
	public String updateDbInfo(@Valid DbInfo dbInfo,@RequestParam(value = "orgId", required = false) String[] orgIds){
//		String[] orgIds = this.getRequest().getParameterValues("orgId");
		this.dbInfoService.editDbInfo(dbInfo, orgIds);
		return "redirect:/db/listDbInfo.html";
	}
	
	/**
	 * 
	* @Title: deleteDbInfo 
	* @Description: 删除DB卡信息 
	* @param @param dbId
	* @param @param map
	* @param @return    设定文件 
	* @return String    返回类型 
	* @throws
	 */
	@RequestMapping("/deleteDbInfo")
	@RequiresPermissions(value = PermissionSign.DB_DELETE)
	public String deleteDbInfo(
			@RequestParam(value = "dbId", required = false) String dbId,
			ModelMap map){
		this.dbInfoService.delete(dbId);
		return "redirect:/db/listDbInfo.html";
	}
	
}
