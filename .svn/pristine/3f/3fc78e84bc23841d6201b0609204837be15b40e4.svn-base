package com.allen.web.service.customer;

import java.util.List;

import javax.annotation.Resource;

import org.apache.commons.lang3.StringUtils;
import org.springframework.stereotype.Service;

import com.allen.core.feature.orm.mybatis.Page;
import com.allen.core.generic.GenericDao;
import com.allen.core.generic.GenericServiceImpl;
import com.allen.core.util.ApplicationUtils;
import com.allen.web.dao.CustomerChannelMapper;
import com.allen.web.dao.CustomerInfoMapper;
import com.allen.web.enums.EnumBool;
import com.allen.web.model.CustomerChannel;
import com.allen.web.model.CustomerInfo;
import com.allen.web.model.CustomerInfoExample;
import com.allen.web.model.CustomerInfoExample.Criteria;
/**
 * 
* @ClassName: CustomerServiceImpl 
* @Description: 客户信息服务实现类
* @author wenquan
* @date 2016年11月25日 下午5:14:04 
*
 */
@Service
public class CustomerServiceImpl extends GenericServiceImpl<CustomerInfo, String>implements CustomerService {

	@Resource
	CustomerInfoMapper customerInfoMapper;
	@Resource
	CustomerChannelMapper customerChannelMapper;
	
	@Override
	public List<CustomerInfo> selectList(Page<CustomerInfo> page) {
		CustomerInfoExample example = new CustomerInfoExample();
		Criteria criteria = example.createCriteria();
		criteria.andIsValidEqualTo(EnumBool.YES.getCode());
		return this.customerInfoMapper.selectByExample(example, page);
	}

	@Override
	public List<CustomerInfo> selectBySearchingPage(Page<CustomerInfo> page, CustomerInfo customerInfo) {
		CustomerInfoExample example = new CustomerInfoExample();
		Criteria criteria = example.createCriteria();
		criteria.andIsValidEqualTo(EnumBool.YES.getCode()).andIsTsEqualTo(EnumBool.NO.getCode());
		if (StringUtils.isNotBlank(customerInfo.getName())) {
			criteria.andNameLike("%"+customerInfo.getName()+"%");
		}
		if (StringUtils.isNotBlank(customerInfo.getMobile())) {
			criteria.andMobileLike("%"+customerInfo.getMobile()+"%");
		}
		if (StringUtils.isNotBlank(customerInfo.getCertificateNo())) {
			criteria.andCertificateNoLike("%"+customerInfo.getCertificateNo()+"%");
		}
		return this.customerInfoMapper.selectByExample(example, page);
	}

	@Override
	public List<CustomerInfo> selectList() {
		CustomerInfoExample example = new CustomerInfoExample();
		example.createCriteria().andIsValidEqualTo(EnumBool.YES.getCode());
		return this.customerInfoMapper.selectByExample(example);
	}

	@Override
	public List<CustomerInfo> selectPartnerCustomer(String customerId) {
		CustomerInfoExample example = new CustomerInfoExample();
		example.createCriteria().andIsValidEqualTo(EnumBool.YES.getCode()).andCustomerIdNotEqualTo(customerId);
		return this.customerInfoMapper.selectByExample(example);
	}

	@Override
	public GenericDao<CustomerInfo, String> getDao() {
		return this.customerInfoMapper;
	}

	@Override
	public int delete(String id) {
		CustomerInfo record = new CustomerInfo();
		record.setCustomerId(id);
		record.setIsValid(EnumBool.NO.getCode());
		return this.customerInfoMapper.updateByPrimaryKeySelective(record);
	}

	@Override
	public List<CustomerInfo> selectCustomerByName(String name) {
		CustomerInfoExample example = new CustomerInfoExample();
		example.createCriteria().andIsValidEqualTo(EnumBool.YES.getCode()).andNameLike("%"+name+"%");
		return this.customerInfoMapper.selectByExample(example);
	}

	@Override
	public List<CustomerInfo> selectTemporaryStorage(CustomerInfo customerInfo, String currentUserId, Page<CustomerInfo> page) {
		CustomerInfoExample example = new CustomerInfoExample();
		Criteria criteria = example.createCriteria().andIsValidEqualTo(EnumBool.YES.getCode()).andIsTsEqualTo(EnumBool.YES.getCode()).andCreateUserIdEqualTo(currentUserId);
		if (StringUtils.isNotBlank(customerInfo.getName())) {
			criteria.andNameLike("%"+customerInfo.getName()+"%");
		}
		if (StringUtils.isNotBlank(customerInfo.getMobile())) {
			criteria.andMobileLike("%"+customerInfo.getMobile()+"%");
		}
		if (StringUtils.isNotBlank(customerInfo.getCertificateNo())) {
			criteria.andCertificateNoLike("%"+customerInfo.getCertificateNo()+"%");
		}
		return this.customerInfoMapper.selectByExample(example, page);
	}

	@Override
	public List<CustomerInfo> selectMyCustomerInfo(CustomerInfo customerInfo, String currentUserId, Page<CustomerInfo> page) {
		CustomerInfoExample example = new CustomerInfoExample();
		Criteria criteria = example.createCriteria().andIsValidEqualTo(EnumBool.YES.getCode()).andIsTsEqualTo(EnumBool.NO.getCode()).andCreateUserIdEqualTo(currentUserId);
		if (StringUtils.isNotBlank(customerInfo.getName())) {
			criteria.andNameLike("%"+customerInfo.getName()+"%");
		}
		if (StringUtils.isNotBlank(customerInfo.getMobile())) {
			criteria.andMobileLike("%"+customerInfo.getMobile()+"%");
		}
		if (StringUtils.isNotBlank(customerInfo.getCertificateNo())) {
			criteria.andCertificateNoLike("%"+customerInfo.getCertificateNo()+"%");
		}
		return this.customerInfoMapper.selectByExample(example, page);
	}

	@Override
	public int createCustomer(CustomerInfo customerInfo, String[] channels) {
		int i = this.insert(customerInfo);
		CustomerChannel record = new CustomerChannel(); 
		if(channels.length>0){
			String customerId = customerInfo.getCustomerId();
			for (String channelId : channels) {
				record.setCcId(ApplicationUtils.randomUUID());
				record.setCustomerId(customerId);
				record.setChannelId(channelId);
				i=i+this.customerChannelMapper.insert(record);
			}
		}
		return i;
	}


}
