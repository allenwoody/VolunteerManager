package com.allen.web.controller.card;

import java.io.File;
import java.io.UnsupportedEncodingException;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.validation.Valid;

import org.apache.commons.lang3.StringUtils;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.commons.CommonsMultipartFile;
import org.springframework.web.multipart.support.DefaultMultipartHttpServletRequest;

import com.allen.core.common.Const;
import com.allen.core.entity.JSONResult;
import com.allen.core.feature.orm.mybatis.Page;
import com.allen.core.generic.GenericController;
import com.allen.core.util.ApplicationUtils;
import com.allen.core.util.IncCordInfoPOI;
import com.allen.web.enums.EnumAuditState;
import com.allen.web.enums.EnumBool;
import com.allen.web.enums.EnumCardState;
import com.allen.web.enums.EnumCardType;
import com.allen.web.model.CardInfo;
import com.allen.web.model.CardItem;
import com.allen.web.model.CardSample;
import com.allen.web.model.ProjectItem;
import com.allen.web.security.PermissionSign;
import com.allen.web.service.card.CardInfoService;
import com.allen.web.service.card.CardItemService;
import com.allen.web.service.card.CardSampleService;
import com.allen.web.service.customer.CustomerService;
import com.allen.web.service.item.MedicalItemService;

/**
 * 
* @ClassName: CardInfoController 
* @Description: 卡片信息controller -->改为产品信息
* @author wenquan
* @date 2016年6月23日 上午10:38:03 
*
 */
@RequestMapping("/card")
@Controller
public class CardInfoController extends GenericController {

	Logger logger = LoggerFactory.getLogger(CardInfoController.class);
	
	@Resource
	CardInfoService cardInfoService;
	@Resource
	CardSampleService cardSampleService;
	@Resource
	CustomerService customerService;
	@Resource
	MedicalItemService medicalItemService;
	@Resource
	CardItemService cardItemService;
	/**
	 * @throws Exception 
	 * 
	* @Title: listCardInfo 
	* @Description: 卡信息查询 
	* @param @param name
	* @param @param cardNo
	* @param @param policyNo
	* @param @param pageNo
	* @param @param map
	* @param @return    设定文件 
	* @return String    返回类型 
	* @throws
	 */
	@RequestMapping("/listCardInfo")
	@RequiresPermissions(value = PermissionSign.CARDINFO_QUERY)
	public String listCardInfo(
			@RequestParam(value = "name", required = false) String name,
			@RequestParam(value = "cardNo", required = false) String cardNo,
			@RequestParam(value = "policyNo", required = false) String policyNo,
			@RequestParam(value = "pageNo", required = false) String pageNo,
			@RequestParam(value = "message",required = false) String message,
			ModelMap map) throws Exception{
		String defaultPageNo = pageNo;
		if (StringUtils.isBlank(defaultPageNo)) {
			defaultPageNo="1";
		}
		CardInfo model = new CardInfo();
		model.setCardNo(cardNo);
		model.setPolicyNo(policyNo);
		Page<CardInfo> page = new Page<>(Integer.parseInt(defaultPageNo), Const.PAGE_SIZE);
		List<CardInfo> cardList = this.cardInfoService.selectList(page, name, model);
		
		map.put("cardList", cardList);
		map.put("page", page);
		map.put("model", model);
		map.put("cardStateMap", EnumCardState.toMap());
		map.put("auditStateMap", EnumAuditState.toMap());
		if(StringUtils.isNoneBlank(message)){
			message = new String(message.getBytes("iso8859-1"),"UTF-8");
		}
		map.put("message", message);
		return "/card/listCardInfo";
	}
	
	/**
	 * 
	* @Title: addCard 
	* @Description: 新增卡片信息 
	* @param @param map
	* @param @return    设定文件 
	* @return String    返回类型 
	* @throws
	 */
	@RequestMapping("/addCardInfo")
	@RequiresPermissions(value = PermissionSign.CARDINFO_CREATE)
	public String addCardInfo(
			ModelMap map){
		List<CardSample> cardSampleList = this.cardSampleService.selectList();
		map.put("boolMap", EnumBool.toMap());
		map.put("cardTypeMap", EnumCardType.toMap());
		map.put("cardTypeMap", EnumCardType.toMap());
		map.put("customerList", this.customerService.selectList());
		map.put("cardSampleList", cardSampleList);
		map.put("cardTypeMap", EnumCardType.toMap());
		map.put("cardStateMap", EnumCardState.toMap());
		return "/card/addCardInfo";
	}
	
	/**
	 * 
	* @Title: insertCardInfo 
	* @Description: 插入卡信息 
	* @param @param model
	* @param @param map
	* @param @return    设定文件 
	* @return String    返回类型 
	* @throws
	 */
	@RequestMapping("/insertCardInfo")
	@RequiresPermissions(value = PermissionSign.CARDINFO_CREATE)
	public String insertCardInfo(
			@Valid CardInfo model,
			ModelMap map){
		model.setCardId(ApplicationUtils.randomUUID());
		model.setAuditState(EnumAuditState.PENDING.getCode());
		model.setCardState(EnumCardState.NORMAL.getCode());
		model.setIsValid(EnumBool.YES.getCode());
		this.cardInfoService.insert(model,this.getLoginUser());
		return "redirect:/card/listCardInfo.html";
	}
	
	/**
	 * 
	* @Title: editCardInfo 
	* @Description: 编辑卡信息 
	* @param @param cardId
	* @param @param map
	* @param @return    设定文件 
	* @return String    返回类型 
	* @throws
	 */
	@RequestMapping("/editCardInfo")
	@RequiresPermissions(value = PermissionSign.CARDINFO_UPDATE)
	public String editCardInfo(
			@RequestParam(value = "cardId", required = false) String cardId,
			ModelMap map){
		CardInfo card = this.cardInfoService.selectById(cardId);
		List<CardSample> cardSampleList = this.cardSampleService.selectList();
		map.put("card", card);
		map.put("boolMap", EnumBool.toMap());
		map.put("cardTypeMap", EnumCardType.toMap());
		map.put("cardTypeMap", EnumCardType.toMap());
		map.put("customerList", this.customerService.selectList());
		map.put("cardSampleList", cardSampleList);
		map.put("cardTypeMap", EnumCardType.toMap());
		map.put("cardStateMap", EnumCardState.toMap());
		return "/card/editCardInfo";
	}
	
	/**
	 * 
	* @Title: updateCardInfo 
	* @Description: 更新卡信息 
	* @param @param model
	* @param @param map
	* @param @return    设定文件 
	* @return String    返回类型 
	* @throws
	 */
	@RequestMapping("/updateCardInfo")
	@RequiresPermissions(value = PermissionSign.CARDINFO_UPDATE)
	public String updateCardInfo(
			@Valid CardInfo model,
			ModelMap map){
		
		model.setIsValid(EnumBool.YES.getCode());
		this.cardInfoService.update(model);
		return "redirect:/card/listCardInfo.html";
	}
	
	/**
	 * 
	* @Title: deleteCardInfo 
	* @Description: 删除卡信息 
	* @param @param cardId
	* @param @param map
	* @param @return    设定文件 
	* @return String    返回类型 
	* @throws
	 */
	@RequestMapping("/deleteCardInfo")
	@RequiresPermissions(value = PermissionSign.CARDINFO_DELETE)
	public String deleteCardInfo(
			@RequestParam(value = "cardId", required = false) String cardId,
			ModelMap map){
		this.cardInfoService.delete(cardId);
		return "redirect:/card/listCardInfo.html";
	}
	
	/**
	 * 
	* @Title: getCardSample 
	* @Description: 异步获取图样信息 
	* @param @param projectName
	* @param @return
	* @param @throws Exception    设定文件 
	* @return Map<String,String>    返回类型 
	* @throws
	 */
	@ResponseBody
	@RequestMapping(value = "/ajax/getCardSample", method = RequestMethod.POST)
	public Map<String, String>  getCardSample(@RequestParam("projectName") String projectName) throws Exception {
		
		Map<String, String> map = new HashMap<>();
		CardSample cardSample = this.cardSampleService.selectByProjectName(projectName);
		map.put("cardImage", cardSample.getCardImage());
		return map;
	}
	
	/**
	 * 
	* @Title: getCardItem 
	* @Description: 异步获取图样所拥有的项目信息 
	* @param @param projectName
	* @param @return
	* @param @throws Exception    设定文件 
	* @return JSONResult<List<ProjectItem>>    返回类型 
	* @throws
	 */
	@ResponseBody
	@RequestMapping(value = "/ajax/getProjectItem", method = RequestMethod.POST)
	public JSONResult<List<ProjectItem>>  getProjectItem(@RequestParam("projectName") String projectName) throws Exception {
		JSONResult<List<ProjectItem>> jsonResult = new JSONResult<>();
		List<ProjectItem> projectitemList = this.cardSampleService.selectProjectItemByProjectName(projectName);
		jsonResult.setData(projectitemList);
		jsonResult.setSuccess(true);
		return jsonResult;
	}
	
	/**
	 * 
	* @Title: getCardItem 
	* @Description: 异步获取卡所拥有的项目信息
	* @param @param cardId
	* @param @return
	* @param @throws Exception    设定文件 
	* @return JSONResult<List<MedicalItem>>    返回类型 
	* @throws
	 */
	@ResponseBody
	@RequestMapping(value = "/ajax/getCardItem", method = RequestMethod.POST)
	public JSONResult<List<CardItem>>  getCardItem(@RequestParam("cardId") String cardId) throws Exception {
		JSONResult<List<CardItem>> jsonResult = new JSONResult<>();
		List<CardItem> list = this.cardItemService.selectCardItemByCardId(cardId);
		String cardType = EnumCardType.getEnumByCode(this.cardInfoService.selectById(cardId).getCardType()).getMsg();
		jsonResult.setData(list);
		jsonResult.setSuccess(true);
		jsonResult.setMessage(cardType);
		return jsonResult;
	}
	
	/**
	 * 
	* @Title: submitAuditTask 
	* @Description: 异步提交审核 
	* @param @param cardIdList[]
	* @param @return
	* @param @throws Exception    设定文件 
	* @return JSONResult<List<CardItem>>    返回类型 
	* @throws
	 */
	@ResponseBody
	@RequestMapping(value = "/ajax/submitAuditTask", method = RequestMethod.POST)
	public JSONResult<List<CardItem>>  submitAuditTask(@RequestParam("cardIdList[]") List<String> cardIdList) throws Exception {
		JSONResult<List<CardItem>> jsonResult = new JSONResult<>();
		int i = this.cardInfoService.submitAuditTask(cardIdList, this.getLoginUser());
		
		if(i>0){
			jsonResult.setSuccess(true);
		}
		else{ 
			jsonResult.setSuccess(false);
		}
		return jsonResult;
	}
	
	/**
	 * @Title: incCardInfo
	 * @Description: 导入卡信息
	 * @param request
	 * @param model
	 * @return
	 * @throws Exception
	 */
	@RequestMapping("/incCardInfo")
	public String insertCardSample(DefaultMultipartHttpServletRequest request, ModelMap model)
			throws Exception{
		
		CommonsMultipartFile incFile = (CommonsMultipartFile) request.getFile("incFile");
		String fileName = incFile.getOriginalFilename();
		String rootPath = this.getIncPath();
		fileName = ApplicationUtils.rename(fileName);
		String path = rootPath + fileName;
	    File localFile = new File(path);
	    if (!localFile.exists()) {
	    	localFile.mkdirs();
    	}
	    //写文件到本地
	    incFile.transferTo(localFile);
	    
	    
	    IncCordInfoPOI incCordInfoPOI = new IncCordInfoPOI(path);
	    String exameExcelFormat = incCordInfoPOI.exameIfExcelFormatRight();
	    if(!StringUtils.isBlank(exameExcelFormat)){
	    	return "redirect:/card/listCardInfo.html";
	    }
	    List<Map> cordInfo = incCordInfoPOI.gainDateForMapList();
	    this.cardInfoService.insertByExcel(cordInfo,this.getLoginUser());
	    if (!localFile.delete()) {
			logger.info("删除临时文件失败:"+localFile);
		}
	    String message = this.cardInfoService.insertByExcel(cordInfo,this.getLoginUser());
	    
	    model.put("message", message);
		return "redirect:/card/listCardInfo.html";
	}
	
	/**
	 * 
	* @Title: validateCardNo 
	* @Description: 异步校验cardNo 
	* @param @param cardNo
	* @param @return
	* @param @throws Exception    设定文件 
	* @return JSONResult    返回类型 
	* @throws
	 */
	@ResponseBody
	@RequestMapping(value = "/ajax/validateCardNo", method = RequestMethod.POST)
	public JSONResult  validateCardNo(@RequestParam("cardNo") String cardNo) throws Exception {
		JSONResult jsonResult = new JSONResult<>();
		List<CardInfo> list = this.cardInfoService.selectByCardNo(cardNo);
		if (!list.isEmpty()) {
			jsonResult.setSuccess(false);
		}else {
			jsonResult.setSuccess(true);
		}
		return jsonResult;
	}
}
