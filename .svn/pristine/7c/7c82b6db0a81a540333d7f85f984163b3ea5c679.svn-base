package com.allen.web.controller.item;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;
import javax.validation.Valid;

import org.apache.commons.lang3.StringUtils;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.allen.core.common.Const;
import com.allen.core.entity.JSONResult;
import com.allen.core.feature.orm.mybatis.Page;
import com.allen.core.generic.GenericController;
import com.allen.core.util.ApplicationUtils;
import com.allen.web.enums.EnumBool;
import com.allen.web.model.MedicalItem;
import com.allen.web.security.PermissionSign;
import com.allen.web.service.item.MedicalItemService;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;

/**
 * 
* @ClassName: MedicalItemController 
* @Description: 诊疗项目controller 
* @author wenquan
* @date 2016年7月7日 上午10:24:17 
*
 */
@RequestMapping("/item")
@Controller
public class MedicalItemController extends GenericController {

	Logger logger = LoggerFactory.getLogger(MedicalItemController.class);
	
	@Resource
	MedicalItemService medicalItemService;
	
	/**
	 * 
	* @Title: listMedicalItem 
	* @Description: 展示诊疗项目列表 
	* @param @param itemName
	* @param @param pageNo
	* @param @param map
	* @param @return    设定文件 
	* @return String    返回类型 
	* @throws
	 */
	@RequestMapping("/listMedicalItem")
	@RequiresPermissions(value = PermissionSign.ITEM_QUERY)
	public String listMedicalItem(
			@RequestParam(value = "itemName", required = false) String itemName,
			@RequestParam(value = "pageNo", required = false) String pageNo,
			ModelMap map){
		String defaultPageNo = pageNo;
		if (StringUtils.isBlank(pageNo)) {
			defaultPageNo="1";
		}
		MedicalItem model = new MedicalItem();
		model.setItemName(itemName);
		Page<MedicalItem> page = new Page<>(Integer.parseInt(defaultPageNo), Const.PAGE_SIZE);
		List<MedicalItem> itemList = this.medicalItemService.selectList(page, model);
		map.put("itemList", itemList);
		map.put("page", page);
		map.put("model", model);
		return "/item/listMedicalItem";
	}
	
	/**
	 * 
	* @Title: addMedicalItem 
	* @Description: 新增诊疗项目 
	* @param @param map
	* @param @return    设定文件 
	* @return String    返回类型 
	* @throws
	 */
	@RequestMapping("/addMedicalItem")
	@RequiresPermissions(value = PermissionSign.ITEM_CREATE)
	public String addMedicalItem(ModelMap map){
		
		return "/item/addMedicalItem";
	}
	
	/**
	 * 
	* @Title: insertMedicalItem 
	* @Description: 提交保存诊疗项目 
	* @param @param model
	* @param @param map
	* @param @return    设定文件 
	* @return String    返回类型 
	* @throws
	 */
	@RequestMapping("/insertMedicalItem")
	@RequiresPermissions(value = PermissionSign.ITEM_CREATE)
	public String insertMedicalItem(
			@Valid MedicalItem model,
			ModelMap map){
		model.setItemId(ApplicationUtils.randomUUID());
		model.setIsValid(EnumBool.YES.getCode());
		this.medicalItemService.insert(model);
		return "redirect:/item/listMedicalItem.html";
	}
	/**
	 * 
	* @Title: editMedicalItem 
	* @Description: 编辑诊疗项目 
	* @param @param itemId
	* @param @param map
	* @param @return    设定文件 
	* @return String    返回类型 
	* @throws
	 */
	@RequestMapping("/editMedicalItem")
	@RequiresPermissions(value = PermissionSign.ITEM_UPDATE)
	public String editMedicalItem(
			@RequestParam(value = "itemId", required = false) String itemId,
			ModelMap map){
		MedicalItem item = this.medicalItemService.selectById(itemId);
		map.put("item", item);
		return "/item/editMedicalItem";
	}
	
	/**
	 * 
	* @Title: updateMedicalItem 
	* @Description: 更新修改诊疗项目 
	* @param @param model
	* @param @param map
	* @param @return    设定文件 
	* @return String    返回类型 
	* @throws
	 */
	@RequestMapping("/updateMedicalItem")
	@RequiresPermissions(value = PermissionSign.ITEM_UPDATE)
	public String updateMedicalItem(
			@Valid MedicalItem model,
			ModelMap map){
		this.medicalItemService.update(model);
		return "redirect:/item/listMedicalItem.html";
	}
	
	/**
	 * 
	* @Title: deleteMedicalItem 
	* @Description: 删除诊疗项目 
	* @param @param itemId
	* @param @param map
	* @param @return    设定文件 
	* @return String    返回类型 
	* @throws
	 */
	@RequestMapping("/deleteMedicalItem")
	@RequiresPermissions(value = PermissionSign.ITEM_DELETE)
	public String deleteMedicalItem(
			@RequestParam(value = "itemId", required = false) String itemId,
			ModelMap map){
		this.medicalItemService.delete(itemId);
		return "redirect:/item/listMedicalItem.html";
	}
	
	/**
	 * 
	* @Title: getMedicalItems 
	* @Description: 异步获取诊疗项目列表 
	* @param @return    设定文件 
	* @return String    返回类型 
	* @throws
	 */
	@RequestMapping("/ajax/getItemList")
	@ResponseBody
	public String getItemList(){
		JSONResult<List<MedicalItem>> jsonResult = new JSONResult<>();
		String result = null;
		List<MedicalItem> list = this.medicalItemService.selectList();
		if(list.isEmpty()){
			return null;
		}
		jsonResult.setData(list);
		jsonResult.setSuccess(true);
		ObjectMapper objectMapper = new ObjectMapper();
		try {
			result = objectMapper.writeValueAsString(jsonResult);
		} catch (JsonProcessingException e) {
			logger.info(e.toString());
		}
		
		return result ;
	}
	
	/**
	 * 
	* @Title: getMedicalItems 
	* @Description: 异步分页查询诊疗项目列表
	* @param @param itemName
	* @param @param pageNo
	* @param @return    设定文件 
	* @return String    返回类型 
	* @throws
	 */
	@RequestMapping("/ajax/getMedicalItems")
	@ResponseBody
	public String getMedicalItems(
			@RequestParam(value = "itemName", required = false) String itemName,
			@RequestParam(value = "pageNo", required = false) String pageNo
			){
		JSONResult<List<Object>> jsonResult = new JSONResult<>();
		String result = null;
		String defaultPageNo = pageNo;
		if (StringUtils.isBlank(pageNo)) {
			defaultPageNo="1";
		}
		MedicalItem medicalItem = new MedicalItem();
		Page<MedicalItem> page = new Page<>(Integer.parseInt(defaultPageNo), 5);
		List<MedicalItem> list = this.medicalItemService.selectList(page, medicalItem);
		if(list.isEmpty()){
			return null;
		}
		List<Object> dataList = new ArrayList<>();
		dataList.add(list);
		dataList.add(page);
		jsonResult.setData(dataList);
		jsonResult.setSuccess(true);
		ObjectMapper objectMapper = new ObjectMapper();
		try {
			result = objectMapper.writeValueAsString(jsonResult);
		} catch (JsonProcessingException e) {
			logger.info(e.toString());
		}
		
		return result ;
	}
	
}
