package com.allen.web.controller.card;

import java.io.File;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.annotation.Resource;

import org.apache.commons.lang3.StringUtils;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.commons.CommonsMultipartFile;
import org.springframework.web.multipart.support.DefaultMultipartHttpServletRequest;

import com.allen.core.common.Const;
import com.allen.core.entity.ControllerException;
import com.allen.core.entity.JSONResult;
import com.allen.core.entity.Result;
import com.allen.core.feature.orm.mybatis.Page;
import com.allen.core.generic.GenericController;
import com.allen.core.util.ApplicationUtils;
import com.allen.web.enums.EnumBool;
import com.allen.web.model.CardSample;
import com.allen.web.model.CardSampleCompany;
import com.allen.web.model.CardSampleOrganization;
import com.allen.web.model.Company;
import com.allen.web.model.MedicalItem;
import com.allen.web.model.ProjectItem;
import com.allen.web.security.PermissionSign;
import com.allen.web.service.card.CardSampleCompanyService;
import com.allen.web.service.card.CardSampleOrganizationService;
import com.allen.web.service.card.CardSampleService;
import com.allen.web.service.card.ProjectItemService;
import com.allen.web.service.company.CompanyActivityService;
import com.allen.web.service.company.CompanyService;
import com.allen.web.service.item.MedicalItemService;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
/**
 * 
* @ClassName: CardSampleController 
* @Description: 卡样维护controller 
* @author wenquan
* @date 2016年6月29日 上午10:09:11 
*
 */
@RequestMapping("/card")
@Controller
public class CardSampleController extends GenericController{

	Logger logger = LoggerFactory.getLogger(CardSampleController.class);
	
	@Resource
	CardSampleService cardSampleService;
	@Resource
	ProjectItemService projectItemService;
	@Resource
	MedicalItemService medicalItemService;
	@Resource
	CardSampleCompanyService cardSampleCompanyService;
	@Resource
	CompanyService companyService;
	@Resource
	CardSampleOrganizationService cardSampleOrganizationService;
	@Resource
	CompanyActivityService companyActivityService;
	/**
	 * 
	* @Title: listCardSample 
	* @Description: 查询展示卡样列表 
	* @param @param pageNo
	* @param @param projectName
	* @param @param map
	* @param @return    设定文件 
	* @return String    返回类型 
	* @throws
	 */
	@RequestMapping("/listCardSample")
	@RequiresPermissions(value = PermissionSign.CARDSAMPLE_QUERY)
	public String listCardSample(
			@RequestParam(value = "pageNo", required = false) String pageNo,
			@RequestParam(value = "projectName", required = false) String projectName,
			ModelMap map){
		
		if (StringUtils.isBlank(pageNo)) {
			pageNo="1";//All parameters should be treated as final 不过controller的方法并不会被其他类直接调用，所以无所谓了。
		}
		
		Page<CardSample> page = new Page<>(Integer.parseInt(pageNo), Const.PAGE_SIZE);
		CardSample cardSample = new CardSample();
		cardSample.setProjectName(projectName);
		List<CardSample> cardSampleList = this.cardSampleService.selectList(page, cardSample );
		Map carSamples = new LinkedHashMap();
		String companyName = "";
		for(CardSample aCardSample:cardSampleList){
			if(StringUtils.isNotBlank(aCardSample.getCompactiid())){
				companyName = this.companyService.selectById(this.companyActivityService.selectById(aCardSample.getCompactiid()).getCompanyId()).getCompanyName();
			}
			carSamples.put(aCardSample, companyName);
		}
		List<MedicalItem> itemList = this.medicalItemService.selectList();
		map.put("cardSampleList", cardSampleList);
		map.put("carSamples", carSamples);
		map.put("itemList", itemList);
		map.put("page", page);
		map.put("cardSample", cardSample);
		return "/card/listCardSample";
	}
	
	/**
	 * 
	* @Title: addCardSample 
	* @Description: 新增卡样 
	* @param @return    设定文件 
	* @return String    返回类型 
	* @throws
	 */
	@RequestMapping("/addCardSample")
	@RequiresPermissions(value = PermissionSign.CARDSAMPLE_CREATE)
	public String addCardSample(
			ModelMap map){
		List<Company> companyList = this.companyService.selectAllCompany();
		map.put("companyList", companyList);
		return "/card/addCardSample";
	}
	
	/**
	 * 
	* @Title: insertCardSample 
	* @Description: 插入新卡样 
	* @param @param request
	* @param @param model
	* @param @return
	* @param @throws Exception    设定文件 
	* @return String    返回类型 
	* @throws
	 */
	@RequestMapping("/insertCardSample")
	@RequiresPermissions(value = PermissionSign.CARDSAMPLE_CREATE)
	public String insertCardSample(DefaultMultipartHttpServletRequest request, ModelMap model)
			throws Exception{
		
		CommonsMultipartFile imageFile = (CommonsMultipartFile) request.getFile("imageFile");
		String projectName = request.getParameter("projectName");
		//公司活动名称
		String activityName = request.getParameter("activityName");
		//公司活动id
		String compActiName = request.getParameter("compActiName");
		String fileName = imageFile.getOriginalFilename();
		String rootPath = this.getImgPath();
		fileName = ApplicationUtils.rename(fileName);
		String path = rootPath + fileName;
	    File localFile = new File(path);
	    if (!localFile.exists()) {
	    	localFile.mkdirs();
    	}
	    //写文件到本地
	    imageFile.transferTo(localFile);
	    String projectId = UUID.randomUUID().toString();
	    CardSample cardSample = new CardSample();
	    cardSample.setProjectId(projectId);
	    cardSample.setProjectName(projectName);
	    cardSample.setCardImage("/upload/images/"+fileName);
	    cardSample.setIsValid(EnumBool.YES.getCode());
	    cardSample.setCompactiid(compActiName);
	    cardSample.setCompactiname(activityName);
	    
	    this.cardSampleService.insert(cardSample);
	    //插入合作公司和卡样关联表
	    String company = request.getParameter("company");
	    if(StringUtils.isNotBlank(company))
	    {
	    	CardSampleCompany cardSampleCompany = new CardSampleCompany();
	    	cardSampleCompany.setProjectId(projectId);
	    	cardSampleCompany.setCompanyId(company);
	    	cardSampleCompany.setId(UUID.randomUUID().toString());
	    	this.cardSampleCompanyService.insert(cardSampleCompany);
	    }
	    
	    //插入机构和卡样关系表
	    String orgId = request.getParameter("orgId");
	    if(StringUtils.isNotBlank(orgId))
	    {	
	    	CardSampleOrganization cardSampleOrganization = new CardSampleOrganization();
	    	String[] orgids = orgId.split(",");
	    	for(int i=0;i<orgids.length;i++)
	    	{
	    		cardSampleOrganization.setId(UUID.randomUUID().toString());
	    		cardSampleOrganization.setCardId(projectId);
	    		cardSampleOrganization.setOrgId(orgids[i]);
	    		this.cardSampleOrganizationService.insert(cardSampleOrganization);
	    	}
	    }
	    
		return "redirect:/card/listCardSample.html";
	}
	
	/**
	 * 
	* @Title: editCardSample 
	* @Description: 编辑卡样 
	* @param @param imgId
	* @param @param map
	* @param @return    设定文件 
	* @return String    返回类型 
	* @throws
	 */
	@RequestMapping("/editCardSample")
	@RequiresPermissions(value = PermissionSign.CARDSAMPLE_UPDATE)
	public String editCardSample(
			@RequestParam(value = "imgId", required = false) String imgId,
			ModelMap map){
		CardSample cardSample = this.cardSampleService.selectById(imgId);
		map.put("cardSample", cardSample);
		return "/card/editCardSample";
	}
	
	/**
	 * 
	* @Title: updateCardSample 
	* @Description: 更新卡样 
	* @param @param projectId
	* @param @param request
	* @param @param model
	* @param @return
	* @param @throws Exception    设定文件 
	* @return String    返回类型 
	* @throws
	 */
	@RequestMapping("/updateCardSample")
	@RequiresPermissions(value = PermissionSign.CARDSAMPLE_UPDATE)
	public String updateCardSample(
			@RequestParam(value = "projectId", required = false) String projectId,
			DefaultMultipartHttpServletRequest request, ModelMap model)
			throws Exception{
		
		CommonsMultipartFile imageFile = (CommonsMultipartFile) request.getFile("imageFile");
		String projectName = request.getParameter("projectName");
		CardSample cardSample = new CardSample();
		if (null!=imageFile) {
			String fileName = imageFile.getOriginalFilename();
			String rootPath = this.getImgPath();
			fileName = ApplicationUtils.rename(fileName);
			String path = rootPath + fileName;
			File localFile = new File(path);
			if (!localFile.exists()) {
				localFile.mkdirs();
			}
			//写文件到本地
			imageFile.transferTo(localFile);
			
			cardSample.setCardImage("/upload/images/"+fileName);
			cardSample.setProjectName(projectName);
		}
	    cardSample.setProjectId(projectId);
	    this.cardSampleService.update(cardSample);
		return "redirect:/card/listCardSample.html";
	}
	
	/**
	 * 
	* @Title: deleteCardSample 
	* @Description: 逻辑删除卡样 
	* @param @param projectId
	* @param @param map
	* @param @return    设定文件 
	* @return String    返回类型 
	* @throws
	 */
	@RequestMapping("/deleteCardSample")
	@RequiresPermissions(value = PermissionSign.CARDSAMPLE_DELETE)
	public String deleteCardSample(
			@RequestParam(value = "projectId", required = false) String projectId,
			ModelMap map){
		this.cardSampleService.delete(projectId);
		return "redirect:/card/listCardSample.html";
	}
	
	/**
	 * 
	* @Title: getExistingItems 
	* @Description: 异步获取已分配的诊疗项目 
	* @param @param projectId
	* @param @return    设定文件 
	* @return String    返回类型 
	* @throws
	 */
	@RequestMapping("/ajax/getExistingItems")
	@ResponseBody
	public String getExistingItems(
			@RequestParam(value = "projectId", required = false) String projectId
			){
		List<ProjectItem> list = this.projectItemService.getAssignedItemByProjectId(projectId);
		ObjectMapper objectMapper = new ObjectMapper();
		JSONResult<List<ProjectItem>> jsonResult = new JSONResult<>();
		String result = null;
		try {
			jsonResult.setData(list);
			jsonResult.setSuccess(true);
			result = objectMapper.writeValueAsString(jsonResult);
		} catch (JsonProcessingException e) {
			logger.info(e.toString());
		}
		return result;
	}
	
	/**
	 * 
	* @Title: savePermissionAssignment 
	* @Description: 异步保存权限分配 
	* @param @param projectId
	* @param @param itemIdList
	* @param @param totalCountList
	* @param @return
	* @param @throws Exception    设定文件 
	* @return Result    返回类型 
	* @throws
	 */
	@ResponseBody
	@RequestMapping("/saveProjectItemAssignment")
	@RequiresPermissions(value=PermissionSign.ROLE_PERMISSIONASSIGNMENT)
	public  Result saveProjectItemAssignment(
			@RequestParam(value = "projectId", required = false) String projectId,
		@RequestParam(value = "itemId", required = false) List<String> itemIdList,
		@RequestParam(value = "totalCount", required = false) List<Long> totalCountList) throws Exception{
		int size = itemIdList.size();
		if (size!=totalCountList.size()) {
			throw new ControllerException("非法的参数");
		}
		this.projectItemService.assignProjectItem(projectId, itemIdList, totalCountList);
		Result result = new Result();
		result.setSuccess(true);
		return result;
	}
}
