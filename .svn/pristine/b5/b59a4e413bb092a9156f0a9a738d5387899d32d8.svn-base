package com.allen.web.controller.customer;

import java.util.ArrayList;
import java.util.Date;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.annotation.Resource;
import javax.validation.Valid;

import org.apache.commons.lang3.StringUtils;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.allen.core.common.Const;
import com.allen.core.entity.JSONResult;
import com.allen.core.feature.orm.mybatis.Page;
import com.allen.core.generic.GenericController;
import com.allen.core.util.ApplicationUtils;
import com.allen.web.enums.EnumBool;
import com.allen.web.enums.EnumCardType;
import com.allen.web.enums.EnumCertType;
import com.allen.web.enums.EnumCustomerType;
import com.allen.web.enums.EnumSex;
import com.allen.web.model.Channel;
import com.allen.web.model.Company;
import com.allen.web.model.CustomerInfo;
import com.allen.web.security.PermissionSign;
import com.allen.web.service.channel.ChannelService;
import com.allen.web.service.company.CompanyService;
import com.allen.web.service.consumption.ConsumptionService;
import com.allen.web.service.customer.CustomerService;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;

/**
 * 
 * @ClassName: CustomerController
 * @Description: 客户信息库controller
 * @author wenquan
 * @date 2016年6月20日 下午4:11:13
 *
 */
@Controller
@RequestMapping("/customer")
public class CustomerController extends GenericController {

	Logger logger = LoggerFactory.getLogger(CustomerController.class);

	@Resource
	CustomerService customerService;
	@Resource
	ConsumptionService consumptionService;
	@Resource
	ChannelService channelService;
	@Resource
	CompanyService companyService;

	/**
	 * 
	 * @Title: lisCustomer @Description: 客户信息查询 @param @param name @param @param
	 * mobile @param @param certificateNo @param @param pageNo @param @param
	 * map @param @return 设定文件 @return String 返回类型 @throws
	 */
	@RequestMapping("/listCustomer")
	@RequiresPermissions(value = PermissionSign.CUSTOMER_QUERY)
	public String listCustomer(@RequestParam(value = "name", required = false) String name,
			@RequestParam(value = "mobile", required = false) String mobile,
			@RequestParam(value = "certificateNo", required = false) String certificateNo,
			@RequestParam(value = "pageNo", required = false) String pageNo,
			@RequestParam(value = "companyId", required = false) String companyId,
			ModelMap map) {
		if (StringUtils.isBlank(pageNo)) {
			pageNo = "1";
		}
		CustomerInfo model = new CustomerInfo();
		model.setName(name);
		model.setMobile(mobile);
		model.setCertificateNo(certificateNo);
		Page<CustomerInfo> page = new Page<>(Integer.parseInt(pageNo), Const.PAGE_SIZE);
		List<CustomerInfo> customerList = this.customerService.selectBySearchingPage(page, model, companyId);
		List<Company> companyList = this.companyService.selectList();
		map.put("companyId", companyId);
		map.put("companyList", companyList);
		map.put("customerList", customerList);
		map.put("page", page);
		map.put("sexMap", EnumSex.toMap());
		map.put("model", model);
		return "/customer/listCustomer";
	}

	/**
	 * 
	 * @Title: listMyCustomerInfo @Description: 查询当前登录用户所提交保存的客户信息 @param @param
	 * pageNo @param @param map @param @return 设定文件 @return String 返回类型 @throws
	 */
	@RequestMapping("/listMyCustomer")
	@RequiresPermissions(value = PermissionSign.CUSTOMER_QUERY)
	public String listMyCustomer(@RequestParam(value = "pageNo", required = false) String pageNo, ModelMap map) {
		if (StringUtils.isBlank(pageNo)) {
			pageNo = "1";
		}
		CustomerInfo model = new CustomerInfo();
		Page<CustomerInfo> page = new Page<>(Integer.parseInt(pageNo), Const.PAGE_SIZE);
		List<CustomerInfo> customerList = this.customerService.selectMyCustomerInfo(model,
				this.getLoginUser().getUserId(), page);
		map.put("customerList", customerList);
		map.put("page", page);
		map.put("sexMap", EnumSex.toMap());
		map.put("model", model);
		return "/customer/listMyCustomer";
	}

	@RequestMapping("/ajax/listMyCustomer")
	@ResponseBody
	@RequiresPermissions(value = PermissionSign.CUSTOMER_QUERY)
	public JSONResult<Object> ajaxListMyCustomer(@RequestParam(value = "name", required = false) String name,
			@RequestParam(value = "mobile", required = false) String mobile,
			@RequestParam(value = "certificateNo", required = false) String certificateNo,
			@RequestParam(value = "pageNo", required = false) String pageNo) {
		if (StringUtils.isBlank(pageNo)) {
			pageNo = "1";
		}
		CustomerInfo model = new CustomerInfo();
		model.setName(name);
		model.setMobile(mobile);
		model.setCertificateNo(certificateNo);
		Page<CustomerInfo> page = new Page<>(Integer.parseInt(pageNo), Const.PAGE_SIZE);
		List<CustomerInfo> customerList = this.customerService.selectMyCustomerInfo(model,
				this.getLoginUser().getUserId(), page);
		for (CustomerInfo customerInfo : customerList) {
			if (StringUtils.isNotBlank(customerInfo.getSex())) {
				customerInfo.setSex(EnumSex.getEnumByCode(customerInfo.getSex()).getMsg());
			}
		}
		JSONResult<Object> jsonResult = new JSONResult<>();
		Object[] obj = new Object[] { customerList, page };
		jsonResult.setData(obj);
		jsonResult.setSuccess(true);
		return jsonResult;
	}

	// /**
	// *
	// * @Title: listTemporaryStorage
	// * @Description: 查询暂存的客户信息
	// * @param @param pageNo
	// * @param @param map
	// * @param @return 设定文件
	// * @return String 返回类型
	// * @throws
	// */
	// @RequestMapping("/listTemporaryStorage")
	// @RequiresPermissions(value = PermissionSign.CUSTOMER_QUERY)
	// public String listTemporaryStorage(
	// @RequestParam(value = "pageNo", required = false) String pageNo,
	// ModelMap map){
	// if (StringUtils.isBlank(pageNo)) {
	// pageNo="1";
	// }
	// CustomerInfo model = new CustomerInfo();
	// Page<CustomerInfo> page = new Page<>(Integer.parseInt(pageNo),
	// Const.PAGE_SIZE);
	// List<CustomerInfo> customerList =
	// this.customerService.selectTemporaryStorage(this.getLoginUser().getUserId(),
	// page);
	// map.put("customerList", customerList);
	// map.put("page", page);
	// map.put("sexMap", EnumSex.toMap());
	// map.put("model", model);
	// return "/customer/listCustomer";
	// }

	/**
	 * 
	 * @Title: ajaxListTemporaryStorage @Description: 异步查询暂存客户信息 @param @param
	 * pageNo @param @param map @param @return 设定文件 @return String 返回类型 @throws
	 */
	@RequestMapping("/ajax/listTemporaryStorage")
	@ResponseBody
	@RequiresPermissions(value = PermissionSign.CUSTOMER_QUERY)
	public JSONResult<Object> ajaxListTemporaryStorage(@RequestParam(value = "name", required = false) String name,
			@RequestParam(value = "mobile", required = false) String mobile,
			@RequestParam(value = "certificateNo", required = false) String certificateNo,
			@RequestParam(value = "pageNo", required = false) String pageNo) {
		if (StringUtils.isBlank(pageNo)) {
			pageNo = "1";
		}
		CustomerInfo model = new CustomerInfo();
		model.setName(name);
		model.setMobile(mobile);
		model.setCertificateNo(certificateNo);
		Page<CustomerInfo> page = new Page<>(Integer.parseInt(pageNo), Const.PAGE_SIZE);
		List<CustomerInfo> customerList = this.customerService.selectTemporaryStorage(model,
				this.getLoginUser().getUserId(), page);
		for (CustomerInfo customerInfo : customerList) {
			if (StringUtils.isNotBlank(customerInfo.getSex())) {
				customerInfo.setSex(EnumSex.getEnumByCode(customerInfo.getSex()).getMsg());
			}
		}
		JSONResult<Object> jsonResult = new JSONResult<>();
		Object[] obj = new Object[] { customerList, page };
		jsonResult.setData(obj);
		jsonResult.setSuccess(true);
		return jsonResult;
	}

	/**
	 * 
	 * @Title: addCustomer @Description: 新增客户信息 @param @param map @param @return
	 * 设定文件 @return String 返回类型 @throws
	 */
	@RequestMapping("/addCustomer")
	@RequiresPermissions(value = PermissionSign.CUSTOMER_CREATE)
	public String addCustomer(ModelMap map) {

		map.put("boolMap", EnumBool.toMap());
		map.put("sexMap", EnumSex.toMap());
		map.put("certTypeMap", EnumCertType.toMap());
		map.put("customerTypeMap", EnumCustomerType.toMap());
		map.put("cardTypeMap", EnumCardType.toMap());
		map.put("channelList", this.channelService.selectList());
		map.put("customerList", this.customerService.selectList());
		return "/customer/addCustomer";
	}

	/**
	 * 
	 * @Title: ajaxinsertCustomer @Description: 暂存客户信息 @param @param
	 * model @param @param map @param @param channel @param @return 设定文件 @return
	 * JSONResult 返回类型 @throws
	 */
	@RequestMapping("/ajax/insertCustomer")
	@ResponseBody
	@RequiresPermissions(value = PermissionSign.CUSTOMER_CREATE)
	public JSONResult ajaxinsertCustomer(@Valid CustomerInfo model, String[] channel, ModelMap map) {
		model.setIsValid(EnumBool.YES.getCode());
		if (StringUtils.isEmpty(model.getIsTs())) {
			model.setIsTs(EnumBool.NO.getCode());
		}
		model.setCreateUserId(this.getLoginUser().getUserId());
		model.setCreateTime(new Date());
		int i;
		if (StringUtils.isEmpty(model.getCustomerId())) {
			model.setCustomerId(ApplicationUtils.randomUUID());
			i = this.customerService.insert(model);
		} else {
			i = this.customerService.update(model);
		}
		JSONResult<Object> jsonResult = new JSONResult<>();
		if (i > 0) {
			jsonResult.setSuccess(true);
			jsonResult.setData(model.getCustomerId());
		} else {
			jsonResult.setSuccess(false);
		}
		return jsonResult;
	}

	/**
	 * 
	 * @Title: insertCustomer @Description: 插入客户信息 @param @param
	 * model @param @param map @param @return 设定文件 @return String 返回类型 @throws
	 */
	@RequestMapping("/insertCustomer")
	@RequiresPermissions(value = PermissionSign.CUSTOMER_CREATE)
	public String insertCustomer(@Valid CustomerInfo model, String[] channel, ModelMap map) {
		model.setCustomerId(ApplicationUtils.randomUUID());
		model.setIsValid(EnumBool.YES.getCode());
		if (StringUtils.isEmpty(model.getIsTs())) {
			model.setIsTs(EnumBool.NO.getCode());
		}
		model.setCreateUserId(this.getLoginUser().getUserId());
		model.setCreateTime(new Date());
		// this.customerService.insert(model);
		this.customerService.createCustomer(model, channel);
		// 直接跳转至该用户的诊疗记录（消费记录）新增页面--->改为跳转至新增客户产品
		map.put("customerId", model.getCustomerId());
//		return "redirect:/consumption/addConsumption.html";
		return "redirect:/card/addCardInfo.html";
	}

	/**
	 * 
	 * @Title: ediCustomer @Description: 编辑客户信息 @param @param
	 * customerId @param @param map @param @return 设定文件 @return String
	 * 返回类型 @throws
	 */
	@RequestMapping("/editCustomer")
	@RequiresPermissions(value = PermissionSign.CUSTOMER_UPDATE)
	public String editCustomer(@RequestParam(value = "customerId", required = false) String customerId, ModelMap map) {
		CustomerInfo customer = this.customerService.selectById(customerId);
		map.put("customer", customer);
		map.put("boolMap", EnumBool.toMap());
		map.put("sexMap", EnumSex.toMap());
		map.put("certTypeMap", EnumCertType.toMap());
		map.put("customerTypeMap", EnumCustomerType.toMap());
		map.put("cardTypeMap", EnumCardType.toMap());
		Set<String> selectedChannels = this.channelService.selectChannelByCustomerId(customerId);
		List<Channel> channelList = this.channelService.selectList();
		Map<Channel, Boolean> channelMap = new LinkedHashMap<>();
		for (Channel channel : channelList) {
			if (selectedChannels.contains(channel.getChannelId())) {
				channelMap.put(channel, true);
			} else {
				channelMap.put(channel, false);
			}
		}
		map.put("channelMap", channelMap);
		map.put("channelList", this.channelService.selectList());
		map.put("selectedChannels", this.channelService.selectChannelByCustomerId(customerId));
		map.put("customerList", this.customerService.selectPartnerCustomer(customer.getCustomerId()));
		return "/customer/editCustomer";
	}

	/**
	 * 
	 * @Title: updateCustomer @Description: 提交客户信息更新 @param @param
	 * model @param @param map @param @return 设定文件 @return String 返回类型 @throws
	 */
	@RequestMapping("/updateCustomer")
	@RequiresPermissions(value = PermissionSign.CUSTOMER_UPDATE)
	public String updateCustomer(@Valid CustomerInfo model, ModelMap map) {
		this.customerService.update(model);
		return "redirect:/customer/listCustomer.html";
	}

	/**
	 * 
	 * @Title: deleteCustomer @Description: 删除客户信息 @param @param
	 * customerId @param @param map @param @return 设定文件 @return String
	 * 返回类型 @throws
	 */
	@RequestMapping("/deleteCustomer")
	@RequiresPermissions(value = PermissionSign.CUSTOMER_DELETE)
	public String deleteCustomer(@RequestParam(value = "customerId", required = false) String customerId,
			ModelMap map) {
		this.customerService.delete(customerId);
		return "redirect:/customer/listCustomer.html";
	}

	/**
	 * 异步获取客户信息
	 */
	@RequestMapping("/ajax/getUserInfo")
	@ResponseBody
	public String getUserInfo(@RequestParam(value = "nameSearch", required = false) String nameSearch,
			@RequestParam(value = "phoneSearch", required = false) String phoneSearch,
			@RequestParam(value = "pageNo", required = false) String pageNo) {
		if (StringUtils.isBlank(pageNo)) {
			pageNo = "1";// All parameters should be treated as final
							// 不过controller的方法并不会被其他类直接调用，所以无所谓了。
		}
		Page<CustomerInfo> page = new Page<>(Integer.parseInt(pageNo), Const.PAGE_SIZE);
		CustomerInfo customerInfo = new CustomerInfo();
		customerInfo.setName(nameSearch);
		customerInfo.setMobile(phoneSearch);
		List<CustomerInfo> list = this.customerService.selectBySearchingPage(page, customerInfo, null);
		for (CustomerInfo a : list) {
			a.setSex(EnumSex.getEnumByCode(a.getSex()).getMsg());
		}

		List all = new ArrayList();
		all.add(page);
		for (CustomerInfo a : list) {
			all.add(a);
		}
		ObjectMapper objectMapper = new ObjectMapper();
		JSONResult<List> jsonResult = new JSONResult<>();
		String result = null;
		try {
			jsonResult.setData(all);
			jsonResult.setSuccess(true);
			result = objectMapper.writeValueAsString(jsonResult);
		} catch (JsonProcessingException e) {
			logger.info(e.toString());
		}
		return result;
	}

	/**
	 * 异步根据id获取客户信息
	 */
	@RequestMapping("/ajax/getUserInfoById")
	@ResponseBody
	public String getUserInfoById(@RequestParam(value = "userId", required = false) String userId) {
		CustomerInfo customerInfo = this.customerService.selectById(userId);
		ObjectMapper objectMapper = new ObjectMapper();
		JSONResult<CustomerInfo> jsonResult = new JSONResult<>();
		String result = null;
		try {
			jsonResult.setData(customerInfo);
			jsonResult.setSuccess(true);
			result = objectMapper.writeValueAsString(jsonResult);
		} catch (JsonProcessingException e) {
			logger.info(e.toString());
		}
		return result;
	}
	// /**
	// *
	// * @Title: getConsumptionInfo
	// * @Description: 异步获取客户就诊信息
	// * @param @param customerId
	// * @param @return
	// * @param @throws Exception 设定文件
	// * @return JSONResult<List<Consumption>> 返回类型
	// * @throws
	// */
	// @ResponseBody
	// @RequestMapping(value = "/ajax/getConsumptionInfo", method =
	// RequestMethod.POST)
	// public JSONResult<List<Consumption>>
	// getConsumptionInfo(@RequestParam("customerId") String customerId) throws
	// Exception {
	// JSONResult<List<Consumption>> jsonResult = new JSONResult<>();
	// List<Consumption> list =
	// this.consumptionService.selectConsumptionByCustomer(customerId);
	// jsonResult.setData(list);
	// jsonResult.setSuccess(true);
	// return jsonResult;
	// }
}
