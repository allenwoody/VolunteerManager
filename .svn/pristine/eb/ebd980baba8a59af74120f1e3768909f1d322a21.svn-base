package com.allen.web.controller.company;

import java.io.File;
import java.util.Date;
import java.util.List;
import java.util.UUID;

import javax.annotation.Resource;

import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.commons.CommonsMultipartFile;
import org.springframework.web.multipart.support.DefaultMultipartHttpServletRequest;

import com.allen.core.common.Const;
import com.allen.core.entity.ControllerException;
import com.allen.core.entity.JSONResult;
import com.allen.core.entity.Result;
import com.allen.core.feature.orm.mybatis.Page;
import com.allen.core.generic.GenericController;
import com.allen.web.model.Company;
import com.allen.web.model.CompanyActivity;
import com.allen.web.model.ConsumptionVo;
import com.allen.web.model.ProjectItem;
import com.allen.web.service.company.CompanyActivityService;
import com.allen.web.service.company.CompanyService;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;

/**
 * @ClassName: CompanyController
 * @Description: 公司维护controller
 * @author guoliguo
 *
 */
@RequestMapping("/company")
@Controller
public class CompanyController extends GenericController {

	Logger logger = LoggerFactory.getLogger(CompanyController.class);

	@Resource
	CompanyService companyService;
	@Resource
	CompanyActivityService companyActivityService;

	/**
	 * @Title: listCompany
	 * @Description: 公司列表
	 * @param pageNo
	 * @param companyName
	 * @param map
	 * @return
	 */
	@RequestMapping("/listCompany")
	public String listCompany(@RequestParam(value = "pageNo", required = false) String pageNo,
			@RequestParam(value = "companyName", required = false) String companyName, ModelMap map) {

		if (StringUtils.isBlank(pageNo)) {
			pageNo = "1";// All parameters should be treated as final
							// 不过controller的方法并不会被其他类直接调用，所以无所谓了。
		}

		Page<Company> page = new Page<>(Integer.parseInt(pageNo), Const.PAGE_SIZE);
		Company company = new Company();
		company.setCompanyName(companyName);
		List<Company> companyList = this.companyService.selectList(page, company);
		map.put("companyList", companyList);
		map.put("page", page);
		map.put("company", company);
		return "/company/listCompany";
	}

	/**
	 * 
	 * <p>
	 * Title: addCompany
	 * </p>
	 * <p>
	 * Description: 跳转到新增页面
	 * </p>
	 * 
	 * @return: String
	 * @param: @return
	 * @throws @author:
	 *             guoliguo
	 * @Date 2016年8月26日上午10:11:59
	 */
	@RequestMapping("/addCompany")
	public String addCompany() {
		return "/company/addCompany";
	}

	/**
	 * 
	 * <p>
	 * Title: insertCardSample
	 * </p>
	 * <p>
	 * Description: 插入公司信息
	 * </p>
	 * 
	 * @return: String
	 * @param: @param
	 *             request
	 * @param: @param
	 *             model
	 * @param: @return
	 * @param: @throws
	 *             Exception
	 * @throws @author:
	 *             guoliguo
	 * @Date 2016年8月26日上午11:09:14
	 */
	@RequestMapping("/insertCompany")
	public String insertCardSample(DefaultMultipartHttpServletRequest request, ModelMap model) throws Exception {

		CommonsMultipartFile companyLogo = (CommonsMultipartFile) request.getFile("companyLogo");
		String companyName = request.getParameter("companyName");
		String fileName = companyLogo.getOriginalFilename();
		String rootPath = this.getImgPath();
		fileName = this.rename(fileName);
		String path = rootPath + fileName;
		File localFile = new File(path);
		if (!localFile.exists()) {
			localFile.mkdirs();
		}
		// 写文件到本地
		companyLogo.transferTo(localFile);
		Company company = new Company();
		company.setCompanyId(UUID.randomUUID().toString());
		company.setCompanyLogo("/upload/images/" + fileName);
		company.setCompanyName(companyName);

		this.companyService.insert(company);
		return "redirect:/company/listCompany.html";
	}

	/**
	 * 
	 * <p>
	 * Title: deleteCompany
	 * </p>
	 * <p>
	 * Description: 删除公司
	 * </p>
	 * 
	 * @return: String
	 * @param: @param
	 *             companyId
	 * @param: @param
	 *             map
	 * @param: @return
	 * @throws @author:
	 *             guoliguo
	 * @Date 2016年8月29日下午3:58:09
	 */
	@RequestMapping("/deleteCompany")
	public String deleteCompany(@RequestParam(value = "companyId", required = false) String companyId, ModelMap map) {
		this.companyService.delete(companyId);
		return "redirect:/company/listCompany.html";
	}

	/**
	 * 
	 * @Title: getExistingActivity @Description: 异步获取已存在的活动 @param @param
	 * companyId @param @return 设定文件 @return String 返回类型 @throws
	 */
	@RequestMapping("/ajax/getExistingActivity")
	@ResponseBody
	public String getExistingActivity(@RequestParam(value = "companyId", required = false) String companyId) {
		List<CompanyActivity> list = this.companyActivityService.selectActivityBycompanyId(companyId);
		ObjectMapper objectMapper = new ObjectMapper();
		JSONResult<List<CompanyActivity>> jsonResult = new JSONResult<>();
		String result = null;
		try {
			jsonResult.setData(list);
			jsonResult.setSuccess(true);
			result = objectMapper.writeValueAsString(jsonResult);
		} catch (JsonProcessingException e) {
			logger.info(e.toString());
		}
		return result;
	}

	/**
	 * 
	 * <p>
	 * Title: saveCompanyActivity
	 * </p>
	 * <p>
	 * Description: 保存公司活动
	 * </p>
	 * 
	 * @return: Result
	 * @param: @param
	 *             companyId
	 * @param: @param
	 *             activityList
	 * @param: @return
	 * @throws @author:
	 *             guoliguo
	 * @Date 2016年8月29日下午3:58:29
	 */
	@ResponseBody
	@RequestMapping("/ajax/saveCompanyActivity")
	public JSONResult<Object> saveCompanyActivity(@RequestBody List<CompanyActivity> activityList) {
		int i = this.companyActivityService.saveCompanyActivity(activityList);
		JSONResult<Object> jsonResult = new JSONResult<>();
		if (i > 0) {
			jsonResult.setSuccess(true);
		} else {
			jsonResult.setSuccess(false);
		}
		return jsonResult;

	}

	/**
	 * 
	 * @Title: rename @Description: 用于上传文件的重命名 @param @param
	 * fileName @param @return 设定文件 @return String 返回类型 @throws
	 */
	private String rename(String fileName) {
		String body;
		String ext;
		Date date = new Date();
		int pot = fileName.lastIndexOf('.');
		if (pot != -1) {
			body = Long.toString(date.getTime());
			ext = fileName.substring(pot);
		} else {
			body = Long.toString((new Date()).getTime());
			ext = "";
		}
		return body + ext;

	}
}
